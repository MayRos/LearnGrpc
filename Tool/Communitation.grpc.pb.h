// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Communitation.proto
#ifndef GRPC_Communitation_2eproto__INCLUDED
#define GRPC_Communitation_2eproto__INCLUDED

#include "Communitation.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace Demo {

class Demo final {
 public:
  static constexpr char const* service_full_name() {
    return "Demo.Demo";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Service1(::grpc::ClientContext* context, const ::Demo::Request& request, ::Demo::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Demo::Response>> AsyncService1(::grpc::ClientContext* context, const ::Demo::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Demo::Response>>(AsyncService1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Demo::Response>> PrepareAsyncService1(::grpc::ClientContext* context, const ::Demo::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Demo::Response>>(PrepareAsyncService1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::Demo::Request>> Service2(::grpc::ClientContext* context, ::Demo::Response* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::Demo::Request>>(Service2Raw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::Demo::Request>> AsyncService2(::grpc::ClientContext* context, ::Demo::Response* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::Demo::Request>>(AsyncService2Raw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::Demo::Request>> PrepareAsyncService2(::grpc::ClientContext* context, ::Demo::Response* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::Demo::Request>>(PrepareAsyncService2Raw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::Demo::Response>> Service3(::grpc::ClientContext* context, const ::Demo::Request& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::Demo::Response>>(Service3Raw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Demo::Response>> AsyncService3(::grpc::ClientContext* context, const ::Demo::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Demo::Response>>(AsyncService3Raw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Demo::Response>> PrepareAsyncService3(::grpc::ClientContext* context, const ::Demo::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Demo::Response>>(PrepareAsyncService3Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::Demo::Request, ::Demo::Response>> Service4(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::Demo::Request, ::Demo::Response>>(Service4Raw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::Demo::Request, ::Demo::Response>> AsyncService4(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::Demo::Request, ::Demo::Response>>(AsyncService4Raw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::Demo::Request, ::Demo::Response>> PrepareAsyncService4(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::Demo::Request, ::Demo::Response>>(PrepareAsyncService4Raw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Service1(::grpc::ClientContext* context, const ::Demo::Request* request, ::Demo::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Service1(::grpc::ClientContext* context, const ::Demo::Request* request, ::Demo::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Service2(::grpc::ClientContext* context, ::Demo::Response* response, ::grpc::ClientWriteReactor< ::Demo::Request>* reactor) = 0;
      virtual void Service3(::grpc::ClientContext* context, const ::Demo::Request* request, ::grpc::ClientReadReactor< ::Demo::Response>* reactor) = 0;
      virtual void Service4(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::Demo::Request,::Demo::Response>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Demo::Response>* AsyncService1Raw(::grpc::ClientContext* context, const ::Demo::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Demo::Response>* PrepareAsyncService1Raw(::grpc::ClientContext* context, const ::Demo::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::Demo::Request>* Service2Raw(::grpc::ClientContext* context, ::Demo::Response* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::Demo::Request>* AsyncService2Raw(::grpc::ClientContext* context, ::Demo::Response* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::Demo::Request>* PrepareAsyncService2Raw(::grpc::ClientContext* context, ::Demo::Response* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::Demo::Response>* Service3Raw(::grpc::ClientContext* context, const ::Demo::Request& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Demo::Response>* AsyncService3Raw(::grpc::ClientContext* context, const ::Demo::Request& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Demo::Response>* PrepareAsyncService3Raw(::grpc::ClientContext* context, const ::Demo::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::Demo::Request, ::Demo::Response>* Service4Raw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::Demo::Request, ::Demo::Response>* AsyncService4Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::Demo::Request, ::Demo::Response>* PrepareAsyncService4Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Service1(::grpc::ClientContext* context, const ::Demo::Request& request, ::Demo::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Demo::Response>> AsyncService1(::grpc::ClientContext* context, const ::Demo::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Demo::Response>>(AsyncService1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Demo::Response>> PrepareAsyncService1(::grpc::ClientContext* context, const ::Demo::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Demo::Response>>(PrepareAsyncService1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::Demo::Request>> Service2(::grpc::ClientContext* context, ::Demo::Response* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::Demo::Request>>(Service2Raw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::Demo::Request>> AsyncService2(::grpc::ClientContext* context, ::Demo::Response* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::Demo::Request>>(AsyncService2Raw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::Demo::Request>> PrepareAsyncService2(::grpc::ClientContext* context, ::Demo::Response* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::Demo::Request>>(PrepareAsyncService2Raw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::Demo::Response>> Service3(::grpc::ClientContext* context, const ::Demo::Request& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::Demo::Response>>(Service3Raw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Demo::Response>> AsyncService3(::grpc::ClientContext* context, const ::Demo::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Demo::Response>>(AsyncService3Raw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Demo::Response>> PrepareAsyncService3(::grpc::ClientContext* context, const ::Demo::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Demo::Response>>(PrepareAsyncService3Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::Demo::Request, ::Demo::Response>> Service4(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::Demo::Request, ::Demo::Response>>(Service4Raw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::Demo::Request, ::Demo::Response>> AsyncService4(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::Demo::Request, ::Demo::Response>>(AsyncService4Raw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::Demo::Request, ::Demo::Response>> PrepareAsyncService4(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::Demo::Request, ::Demo::Response>>(PrepareAsyncService4Raw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Service1(::grpc::ClientContext* context, const ::Demo::Request* request, ::Demo::Response* response, std::function<void(::grpc::Status)>) override;
      void Service1(::grpc::ClientContext* context, const ::Demo::Request* request, ::Demo::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Service2(::grpc::ClientContext* context, ::Demo::Response* response, ::grpc::ClientWriteReactor< ::Demo::Request>* reactor) override;
      void Service3(::grpc::ClientContext* context, const ::Demo::Request* request, ::grpc::ClientReadReactor< ::Demo::Response>* reactor) override;
      void Service4(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::Demo::Request,::Demo::Response>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Demo::Response>* AsyncService1Raw(::grpc::ClientContext* context, const ::Demo::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Demo::Response>* PrepareAsyncService1Raw(::grpc::ClientContext* context, const ::Demo::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::Demo::Request>* Service2Raw(::grpc::ClientContext* context, ::Demo::Response* response) override;
    ::grpc::ClientAsyncWriter< ::Demo::Request>* AsyncService2Raw(::grpc::ClientContext* context, ::Demo::Response* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::Demo::Request>* PrepareAsyncService2Raw(::grpc::ClientContext* context, ::Demo::Response* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::Demo::Response>* Service3Raw(::grpc::ClientContext* context, const ::Demo::Request& request) override;
    ::grpc::ClientAsyncReader< ::Demo::Response>* AsyncService3Raw(::grpc::ClientContext* context, const ::Demo::Request& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::Demo::Response>* PrepareAsyncService3Raw(::grpc::ClientContext* context, const ::Demo::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::Demo::Request, ::Demo::Response>* Service4Raw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::Demo::Request, ::Demo::Response>* AsyncService4Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::Demo::Request, ::Demo::Response>* PrepareAsyncService4Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Service1_;
    const ::grpc::internal::RpcMethod rpcmethod_Service2_;
    const ::grpc::internal::RpcMethod rpcmethod_Service3_;
    const ::grpc::internal::RpcMethod rpcmethod_Service4_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Service1(::grpc::ServerContext* context, const ::Demo::Request* request, ::Demo::Response* response);
    virtual ::grpc::Status Service2(::grpc::ServerContext* context, ::grpc::ServerReader< ::Demo::Request>* reader, ::Demo::Response* response);
    virtual ::grpc::Status Service3(::grpc::ServerContext* context, const ::Demo::Request* request, ::grpc::ServerWriter< ::Demo::Response>* writer);
    virtual ::grpc::Status Service4(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::Demo::Response, ::Demo::Request>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_Service1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Service1() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Service1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Service1(::grpc::ServerContext* /*context*/, const ::Demo::Request* /*request*/, ::Demo::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestService1(::grpc::ServerContext* context, ::Demo::Request* request, ::grpc::ServerAsyncResponseWriter< ::Demo::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Service2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Service2() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Service2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Service2(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::Demo::Request>* /*reader*/, ::Demo::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestService2(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::Demo::Response, ::Demo::Request>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Service3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Service3() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Service3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Service3(::grpc::ServerContext* /*context*/, const ::Demo::Request* /*request*/, ::grpc::ServerWriter< ::Demo::Response>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestService3(::grpc::ServerContext* context, ::Demo::Request* request, ::grpc::ServerAsyncWriter< ::Demo::Response>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Service4 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Service4() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Service4() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Service4(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Demo::Response, ::Demo::Request>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestService4(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::Demo::Response, ::Demo::Request>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Service1<WithAsyncMethod_Service2<WithAsyncMethod_Service3<WithAsyncMethod_Service4<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Service1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Service1() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Demo::Request, ::Demo::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Demo::Request* request, ::Demo::Response* response) { return this->Service1(context, request, response); }));}
    void SetMessageAllocatorFor_Service1(
        ::grpc::MessageAllocator< ::Demo::Request, ::Demo::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Demo::Request, ::Demo::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Service1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Service1(::grpc::ServerContext* /*context*/, const ::Demo::Request* /*request*/, ::Demo::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Service1(
      ::grpc::CallbackServerContext* /*context*/, const ::Demo::Request* /*request*/, ::Demo::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Service2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Service2() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::Demo::Request, ::Demo::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, ::Demo::Response* response) { return this->Service2(context, response); }));
    }
    ~WithCallbackMethod_Service2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Service2(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::Demo::Request>* /*reader*/, ::Demo::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::Demo::Request>* Service2(
      ::grpc::CallbackServerContext* /*context*/, ::Demo::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Service3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Service3() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::Demo::Request, ::Demo::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Demo::Request* request) { return this->Service3(context, request); }));
    }
    ~WithCallbackMethod_Service3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Service3(::grpc::ServerContext* /*context*/, const ::Demo::Request* /*request*/, ::grpc::ServerWriter< ::Demo::Response>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::Demo::Response>* Service3(
      ::grpc::CallbackServerContext* /*context*/, const ::Demo::Request* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Service4 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Service4() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::Demo::Request, ::Demo::Response>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->Service4(context); }));
    }
    ~WithCallbackMethod_Service4() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Service4(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Demo::Response, ::Demo::Request>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::Demo::Request, ::Demo::Response>* Service4(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_Service1<WithCallbackMethod_Service2<WithCallbackMethod_Service3<WithCallbackMethod_Service4<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Service1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Service1() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Service1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Service1(::grpc::ServerContext* /*context*/, const ::Demo::Request* /*request*/, ::Demo::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Service2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Service2() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Service2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Service2(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::Demo::Request>* /*reader*/, ::Demo::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Service3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Service3() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Service3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Service3(::grpc::ServerContext* /*context*/, const ::Demo::Request* /*request*/, ::grpc::ServerWriter< ::Demo::Response>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Service4 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Service4() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Service4() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Service4(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Demo::Response, ::Demo::Request>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Service1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Service1() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Service1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Service1(::grpc::ServerContext* /*context*/, const ::Demo::Request* /*request*/, ::Demo::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestService1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Service2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Service2() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Service2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Service2(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::Demo::Request>* /*reader*/, ::Demo::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestService2(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Service3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Service3() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Service3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Service3(::grpc::ServerContext* /*context*/, const ::Demo::Request* /*request*/, ::grpc::ServerWriter< ::Demo::Response>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestService3(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Service4 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Service4() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Service4() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Service4(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Demo::Response, ::Demo::Request>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestService4(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Service1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Service1() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Service1(context, request, response); }));
    }
    ~WithRawCallbackMethod_Service1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Service1(::grpc::ServerContext* /*context*/, const ::Demo::Request* /*request*/, ::Demo::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Service1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Service2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Service2() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->Service2(context, response); }));
    }
    ~WithRawCallbackMethod_Service2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Service2(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::Demo::Request>* /*reader*/, ::Demo::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* Service2(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Service3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Service3() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Service3(context, request); }));
    }
    ~WithRawCallbackMethod_Service3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Service3(::grpc::ServerContext* /*context*/, const ::Demo::Request* /*request*/, ::grpc::ServerWriter< ::Demo::Response>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Service3(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Service4 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Service4() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->Service4(context); }));
    }
    ~WithRawCallbackMethod_Service4() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Service4(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Demo::Response, ::Demo::Request>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Service4(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Service1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Service1() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Demo::Request, ::Demo::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Demo::Request, ::Demo::Response>* streamer) {
                       return this->StreamedService1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Service1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Service1(::grpc::ServerContext* /*context*/, const ::Demo::Request* /*request*/, ::Demo::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedService1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Demo::Request,::Demo::Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Service1<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Service3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Service3() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::Demo::Request, ::Demo::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::Demo::Request, ::Demo::Response>* streamer) {
                       return this->StreamedService3(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Service3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Service3(::grpc::ServerContext* /*context*/, const ::Demo::Request* /*request*/, ::grpc::ServerWriter< ::Demo::Response>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedService3(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::Demo::Request,::Demo::Response>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Service3<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Service1<WithSplitStreamingMethod_Service3<Service > > StreamedService;
};

}  // namespace Demo


#endif  // GRPC_Communitation_2eproto__INCLUDED
