// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Communitation.proto

#include "Communitation.pb.h"
#include "Communitation.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace Demo {

static const char* Demo_method_names[] = {
  "/Demo.Demo/Service1",
  "/Demo.Demo/Service2",
  "/Demo.Demo/Service3",
  "/Demo.Demo/Service4",
};

std::unique_ptr< Demo::Stub> Demo::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Demo::Stub> stub(new Demo::Stub(channel, options));
  return stub;
}

Demo::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Service1_(Demo_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Service2_(Demo_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_Service3_(Demo_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Service4_(Demo_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status Demo::Stub::Service1(::grpc::ClientContext* context, const ::Demo::Request& request, ::Demo::Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Demo::Request, ::Demo::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Service1_, context, request, response);
}

void Demo::Stub::async::Service1(::grpc::ClientContext* context, const ::Demo::Request* request, ::Demo::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Demo::Request, ::Demo::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Service1_, context, request, response, std::move(f));
}

void Demo::Stub::async::Service1(::grpc::ClientContext* context, const ::Demo::Request* request, ::Demo::Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Service1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Demo::Response>* Demo::Stub::PrepareAsyncService1Raw(::grpc::ClientContext* context, const ::Demo::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Demo::Response, ::Demo::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Service1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Demo::Response>* Demo::Stub::AsyncService1Raw(::grpc::ClientContext* context, const ::Demo::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncService1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::Demo::Request>* Demo::Stub::Service2Raw(::grpc::ClientContext* context, ::Demo::Response* response) {
  return ::grpc::internal::ClientWriterFactory< ::Demo::Request>::Create(channel_.get(), rpcmethod_Service2_, context, response);
}

void Demo::Stub::async::Service2(::grpc::ClientContext* context, ::Demo::Response* response, ::grpc::ClientWriteReactor< ::Demo::Request>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::Demo::Request>::Create(stub_->channel_.get(), stub_->rpcmethod_Service2_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::Demo::Request>* Demo::Stub::AsyncService2Raw(::grpc::ClientContext* context, ::Demo::Response* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::Demo::Request>::Create(channel_.get(), cq, rpcmethod_Service2_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::Demo::Request>* Demo::Stub::PrepareAsyncService2Raw(::grpc::ClientContext* context, ::Demo::Response* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::Demo::Request>::Create(channel_.get(), cq, rpcmethod_Service2_, context, response, false, nullptr);
}

::grpc::ClientReader< ::Demo::Response>* Demo::Stub::Service3Raw(::grpc::ClientContext* context, const ::Demo::Request& request) {
  return ::grpc::internal::ClientReaderFactory< ::Demo::Response>::Create(channel_.get(), rpcmethod_Service3_, context, request);
}

void Demo::Stub::async::Service3(::grpc::ClientContext* context, const ::Demo::Request* request, ::grpc::ClientReadReactor< ::Demo::Response>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::Demo::Response>::Create(stub_->channel_.get(), stub_->rpcmethod_Service3_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::Demo::Response>* Demo::Stub::AsyncService3Raw(::grpc::ClientContext* context, const ::Demo::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Demo::Response>::Create(channel_.get(), cq, rpcmethod_Service3_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::Demo::Response>* Demo::Stub::PrepareAsyncService3Raw(::grpc::ClientContext* context, const ::Demo::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Demo::Response>::Create(channel_.get(), cq, rpcmethod_Service3_, context, request, false, nullptr);
}

::grpc::ClientReaderWriter< ::Demo::Request, ::Demo::Response>* Demo::Stub::Service4Raw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::Demo::Request, ::Demo::Response>::Create(channel_.get(), rpcmethod_Service4_, context);
}

void Demo::Stub::async::Service4(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::Demo::Request,::Demo::Response>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::Demo::Request,::Demo::Response>::Create(stub_->channel_.get(), stub_->rpcmethod_Service4_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::Demo::Request, ::Demo::Response>* Demo::Stub::AsyncService4Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::Demo::Request, ::Demo::Response>::Create(channel_.get(), cq, rpcmethod_Service4_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::Demo::Request, ::Demo::Response>* Demo::Stub::PrepareAsyncService4Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::Demo::Request, ::Demo::Response>::Create(channel_.get(), cq, rpcmethod_Service4_, context, false, nullptr);
}

Demo::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Demo_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Demo::Service, ::Demo::Request, ::Demo::Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Demo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Demo::Request* req,
             ::Demo::Response* resp) {
               return service->Service1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Demo_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Demo::Service, ::Demo::Request, ::Demo::Response>(
          [](Demo::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::Demo::Request>* reader,
             ::Demo::Response* resp) {
               return service->Service2(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Demo_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Demo::Service, ::Demo::Request, ::Demo::Response>(
          [](Demo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Demo::Request* req,
             ::grpc::ServerWriter<::Demo::Response>* writer) {
               return service->Service3(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Demo_method_names[3],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Demo::Service, ::Demo::Request, ::Demo::Response>(
          [](Demo::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::Demo::Response,
             ::Demo::Request>* stream) {
               return service->Service4(ctx, stream);
             }, this)));
}

Demo::Service::~Service() {
}

::grpc::Status Demo::Service::Service1(::grpc::ServerContext* context, const ::Demo::Request* request, ::Demo::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Demo::Service::Service2(::grpc::ServerContext* context, ::grpc::ServerReader< ::Demo::Request>* reader, ::Demo::Response* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Demo::Service::Service3(::grpc::ServerContext* context, const ::Demo::Request* request, ::grpc::ServerWriter< ::Demo::Response>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Demo::Service::Service4(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::Demo::Response, ::Demo::Request>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Demo

